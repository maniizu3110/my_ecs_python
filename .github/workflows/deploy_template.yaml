---
name: deploy
on:
  push:
    branches:
      - develop
env:
  ECS_CLUSTER_NAME: "corightdev-corightdevClusterBDD718B2-XDU8InSEZGIP"
  ECS_SERVICE_NAME: "corightprod-corightprodbeService110299AF-IKptnvMb2cMz"
  IMAGE_TAG: ${{ github.sha }}
  AWS_RESION: ap-northeast-1
  ECS_TASK_NAME: "corightprodcorightprodbeTaskDef4CD6E6BC"
  ECR_REPOSITORY: "corightprod-prodcorightbedb08268b-sssnhdvdjeqs"
  S3_CONFIG_OBJECT: "s3://corightprod-prodcorightbeec6ed49a-k29jffk0skxj/coright.yaml"
  DOCKERFILE_NAME: Dockerfile
jobs:
  deploy:
    name: Build image
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Server Image
        run: |
          aws s3 cp ${{ env.S3_CONFIG_OBJECT }} ./etc/coright.yaml 
          docker build --platform linux/x86_64 -f ${{ env.DOCKERFILE_NAME }} -t ${{ env.ECR_REPOSITORY }} .
          docker tag ${{ env.ECR_REPOSITORY }} ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
      # - name: Update ECS Service
      #   run: |
      #     NEW_IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
      #     TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_NAME }} --region ${{ env.AWS_RESION }})
      #     NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$NEW_IMAGE" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
      #     aws ecs register-task-definition --region ${{ env.AWS_RESION }} --cli-input-json "$NEW_TASK_DEFINITION"
      #     aws ecs update-service --cluster ${{ env.ECS_CLUSTER_NAME }} --service ${{ env.ECS_SERVICE_NAME }} --task-definition ${{ env.ECS_TASK_NAME }} --force-new-deployment


# TODO:
  # 1.CDKでECRの作成
  # 2.作成した環境変数のECRをECR_REPOSITORYに登録
  # 3.GitHub Actionsを走らせて正しくイメージが作成されるか確認
  # 4.正しくイメージが作成されたら、CDKでECSの作成
  # 5.作成したECSリソース名に環境変数を書き換え、コメントアウトを外す